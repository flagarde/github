name: Windows M2sys

on:
    push:
    pull_request:
    schedule:
    #Every Sunday at midnight
    - cron:  '0 0 * * 0'

env:
  CMAKE_VERSION: 3.16.x
  NINJA_VERSION: 1.10.2
  BUILD_TYPE: Release
  artifact: "Windows-M2sys.tar.xz"
  INSTALL_ROOT: TRUE
  ROOT_VERSION: 6-20-06
  ROOT_URL: "https://github.com/root-project/root/archive"
  INSTALL_GEANT4: TRUE
  GEANT4_VERSION: 10.4.3
  GEANT4_URL: "https://github.com/Geant4/geant4/archive"
  GEANT4_INSTALL_DATA: YES

jobs:
  # Checkout apply clang-format and upload artifact
  format:
    name: "Format"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.2

    - name: Use clang-format
      uses: DoozyX/clang-format-lint-action@v0.11
      with:
        source: '.'
        clangFormatVersion: 11
        inplace: True

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install cmakelang
      uses: BSFishy/pip-action@v1
      with:
        packages: cmakelang pyyaml jinja2

    - name: Use cmake-format
      run: find . \( -name '*.cmake' -o -name 'CMakeLists.txt' \) -exec cmake-format -i {} \;

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: clang-format
        path: ${{ github.workspace }}

  build:
    needs: format
    name: "Build"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:

    - uses: actions/download-artifact@v2
      with:
        name: clang-format

    - name: Install msys2
      uses: msys2/setup-msys2@v2
      with:
        path-type: minimal
        release: true
        update: true
        install: git mingw-w64-x86_64-toolchain ccache ninja cmake gcc make llvm python

    - name: Download and extract ROOT
      if: env.INSTALL_ROOT == 'TRUE'
      shell: cmake -P {0}
      run: |
          file(DOWNLOAD "${{ env.ROOT_URL }}/v${{ env.ROOT_VERSION }}.zip" "./root-v${{ env.ROOT_VERSION }}.zip")
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./root-v${{ env.ROOT_VERSION }}.zip)

    - name: Configure ROOT
      if: env.INSTALL_ROOT == 'TRUE'
      run: cmake -S ./root-${{ env.ROOT_VERSION }} -B build-root-v${{ env.ROOT_VERSION }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install-root-v${{ env.ROOT_VERSION }} -Dx11=FALSE -DCMAKE_CXX_STANDARD=17 -DROOT_ARCHITECTURE=X86

    - name: Build ROOT
      if: env.INSTALL_ROOT == 'TRUE'
      run: cmake --build build-root-v${{ env.ROOT_VERSION }} --config ${{ env.BUILD_TYPE }} --parallel 2

    - name: Install ROOT
      if: env.INSTALL_ROOT == 'TRUE'
      run: sudo cmake --install build-root-v${{ env.ROOT_VERSION }} --prefix install-root-v${{ env.ROOT_VERSION }} --strip

    - name: Download and extract Geant4
      if: env.INSTALL_GEANT4 == 'TRUE'
      shell: cmake -P {0}
      run: |
          set(GEANT4_URL "$ENV{GEANT4_URL}/v$ENV{GEANT4_VERSION}.zip")
          file(DOWNLOAD "${GEANT4_URL}" "./geant4.zip")
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./geant4.zip)

    - name: Configure Geant4
      if: env.INSTALL_GEANT4 == 'TRUE'
      run: cmake -S ./geant4-${{ env.GEANT4_VERSION }} -G Ninja  -B build-geant4 -D CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -DGEANT4_INSTALL_DATA=${{ env.GEANT4_INSTALL_DATA }} -DCMAKE_INSTALL_PREFIX=geant4-install

    - name: Build Geant4
      if: env.INSTALL_GEANT4 == 'TRUE'
      run: cmake --build build-geant4 --config ${{ env.BUILD_TYPE }} --parallel 2

    - name: Install Geant4
      if: env.INSTALL_GEANT4 == 'TRUE'
      run: cmake --install build-geant4 --prefix geant4-install --strip

    - name: Configure
      working-directory: ${{ github.workspace }}
      run: bash ./root/bin/thisroot.sh ; cmake -S . -G Ninja  -B build -D CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DROOT_DIR=./root/cmake -DGeant4_DIR=${{ github.workspace }}/geant4-install/lib/Geant4-10.4.3/

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel 2

    - name: Download and extract GEANT4
      if: env.INSTALL_GEANT4 == 'TRUE'
      shell: cmake -P {0}
      run: |
          set(GEANT4_URL "$ENV{GEANT4_URL}/v$ENV{GEANT4_VERSION}.zip")
          file(DOWNLOAD "${GEANT4_URL}" "./geant4.zip")
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./geant4.zip)

    - name: Run tests
      working-directory: ${{ github.workspace }}/build
      run: source ${{ github.workspace }}/geant4-install/bin/geant4.sh; ctest -C ${{ env.BUILD_TYPE }} -j2 -VV --output-on-failure

    - name: Install Strip
      run: cmake --install build --prefix instdir --strip

  release:
    name: "Release"
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - name: Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ env.artifact }} .

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: instdir
        name: ${{ env.artifact }}

  publish:
    if: contains(github.ref, 'tags/v')
    name: "Publish"
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.artifact }}
        asset_name: ${{ env.artifact }}
        asset_content_type: application/x-gtar
