name: Linux GCC

on:
    push:
    pull_request:
    schedule:
    #Every Sunday at midnight
    - cron:  '0 0 * * 0'

env:
  CMAKE_VERSION: 3.16.x
  NINJA_VERSION: 1.10.2
  BUILD_TYPE: Release
  CC: gcc
  CXX: g++
  artifact: "Linux-GCC.tar.xz"
  INSTALL_ROOT: TRUE
  INSTALL_GEANT4: TRUE
  GEANT4_VERSION: 10.4.3
  GEANT4_URL: "https://github.com/Geant4/geant4/archive"

jobs:
  # Checkout apply clang-format and upload artifact
  format:
    name: "Format"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.2

    - name: Use clang-format
      uses: DoozyX/clang-format-lint-action@v0.11
      with:
        source: '.'
        clangFormatVersion: 11
        inplace: True

    - name: Setup Python
      uses: actions/setup-python@v2

    - name: Install cmakelang
      uses: BSFishy/pip-action@v1
      with:
        packages: cmakelang pyyaml jinja2

    - name: Use cmake-format
      run: find . \( -name '*.cmake' -o -name 'CMakeLists.txt' \) -exec cmake-format -i {} \;

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: clang-format
        path: ${{ github.workspace }}

  build:
    needs: format
    name: "Build"
    runs-on: ubuntu-latest
    steps:

    - uses: actions/download-artifact@v2
      with:
        name: clang-format

    - name: Install cmake
      uses: jwlawson/actions-setup-cmake@v1.6
      with:
        cmake-version: '${{env.CMAKE_VERSION}}'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3
      with:
        version: '${{env.NINJA_VERSION}}'
    
    - name: Setup conda
      uses: s-weigand/setup-conda@v1
      
    - name: Cache conda
      uses: actions/cache@v2
      with:
        path: /usr/share/miniconda
        key: cacheconda
    
    - name: Cache Geant4
      id: cache-geant4
      uses: actions/cache@v2
      with:
        path: ./geant4
        key: geant4-${{ env.GEANT4_VERSION }}  
      
    - name: Download and extract GEANT4
      if: env.INSTALL_GEANT4 == 'TRUE' && steps.cache-geant4.outputs.cache-hit != 'true'
      run: |
          set(GEANT4_URL "$ENV{GEANT4_URL}/v$ENV{GEANT4_VERSION}.zip")
          file(DOWNLOAD "${GEANT4_URL}" "./geant4.zip")
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./geant4.zip)
          
    - name: Configure Geant4
      if: env.INSTALL_GEANT4 == 'TRUE'
      run: cmake -S ${{ github.workspace }}/geant4/ -G Ninja  -B build-geant4 -D CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -DGEANT4_INSTALL_DATA=ON
      
    - name: Build Geant4
      if: env.INSTALL_GEANT4 == 'TRUE'
      run: cmake --build build-geant4 --config ${{ env.BUILD_TYPE }} --parallel 2
      
    - name: Install Strip
      run: cmake --install build --prefix geant4 --strip
      
    - name: Install ROOT
      run: conda install root -c conda-forge
      if: env.INSTALL_ROOT == 'TRUE'
      
    - name: Test ROOT
      run: root --version
      if: env.INSTALL_ROOT == 'TRUE'
      
    - name: Use ccache
      uses: hendrikmuhs/ccache-action@v1.0.2

    - name: Configure
      run: cmake -S ${{ github.workspace }} -G Ninja  -B build -D CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache 

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel 2

    - name: Run tests
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }} -j2 -VV --output-on-failure

    - name: Install Strip
      run: cmake --install build --prefix instdir --strip

  release:
    name: "Release"
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - name: Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ env.artifact }} .

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: instdir
        name: ${{ env.artifact }}
  publish:
    name: "Publish"
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.artifact }}
        asset_name: ${{ env.artifact }}
        asset_content_type: application/x-gtar

